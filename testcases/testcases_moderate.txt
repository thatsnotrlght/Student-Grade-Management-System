# ============================================================================
# MODERATE TEST CASES - Mixed Scenarios with Some Edge Cases
# Tests error handling and boundary conditions
# Expected to pass for solid implementations
#
# TEST CASE FORMAT DOCUMENTATION:
# Each line contains a test command followed by parameters separated by spaces
# Comments explain what each column/parameter represents and expected outcomes
# ============================================================================

# Extended Validation Tests - Testing boundary conditions
# Format: TEST_IS_VALID_GRADE <grade_value>
# Column 1: TEST_IS_VALID_GRADE (command)
# Column 2: grade_value (float) - testing edge cases around valid range boundaries
TEST_IS_VALID_GRADE 0.1      # Valid - just above minimum
TEST_IS_VALID_GRADE 99.9     # Valid - just below maximum
TEST_IS_VALID_GRADE -0.1     # Invalid - just below minimum  
TEST_IS_VALID_GRADE 100.1    # Invalid - just above maximum

# Edge Case Letter Grades - Testing exact boundary values
# Format: TEST_GET_LETTER_GRADE <average_score>
# Column 1: TEST_GET_LETTER_GRADE (command)
# Column 2: average_score (float) - testing exact grade boundaries
TEST_GET_LETTER_GRADE 90.0    # Exact A boundary (should be A)
TEST_GET_LETTER_GRADE 89.9    # Just below A boundary (should be B)
TEST_GET_LETTER_GRADE 80.0    # Exact B boundary (should be B)
TEST_GET_LETTER_GRADE 79.9    # Just below B boundary (should be C)
TEST_GET_LETTER_GRADE 70.0    # Exact C boundary (should be C)
TEST_GET_LETTER_GRADE 69.9    # Just below C boundary (should be D)
TEST_GET_LETTER_GRADE 60.0    # Exact D boundary (should be D)
TEST_GET_LETTER_GRADE 59.9    # Just below D boundary (should be F)

# Student Management with Error Cases
# Format: TEST_ADD_STUDENT <student_id>
# Column 1: TEST_ADD_STUDENT (command)
# Column 2: student_id (int) - testing various scenarios including error conditions
TEST_ADD_STUDENT 1001        # Valid - should succeed
TEST_ADD_STUDENT 1002        # Valid - should succeed
TEST_ADD_STUDENT 1001        # Duplicate - should return DUPLICATE_ERROR
TEST_ADD_STUDENT 0           # Invalid ID (too low) - should return INVALID_INPUT
TEST_ADD_STUDENT 10000       # Invalid ID (too high) - should return INVALID_INPUT
TEST_ADD_STUDENT 1003        # Valid - should succeed
TEST_ADD_STUDENT 1004        # Valid - should succeed
TEST_ADD_STUDENT 1005        # Valid - should succeed

# Search Tests Including Non-existent Students
# Format: TEST_FIND_STUDENT <student_id>
# Column 1: TEST_FIND_STUDENT (command)
# Column 2: student_id (int) - testing both existing and non-existing students
TEST_FIND_STUDENT 1001       # Should find at index 0
TEST_FIND_STUDENT 1003       # Should find at index 2
TEST_FIND_STUDENT 1005       # Should find at index 4
TEST_FIND_STUDENT 2000       # Should not find (never added)
TEST_FIND_STUDENT 0          # Should not find (invalid ID)

# Grade Entry with Error Conditions
# Format: TEST_ENTER_GRADE <student_id> <assessment_type> <grade_value>
# Column 1: TEST_ENTER_GRADE (command)
# Column 2: student_id (int) - student to enter grade for
# Column 3: assessment_type (int) - 1=Quiz, 2=Assignment, 3=Midterm, 4=Final
# Column 4: grade_value (float) - grade to enter

# Valid grade entries
TEST_ENTER_GRADE 1001 1 85.5    # Valid: Quiz grade for student 1001
TEST_ENTER_GRADE 1001 2 92.0    # Valid: Assignment grade for student 1001
TEST_ENTER_GRADE 1001 3 78.5    # Valid: Midterm grade for student 1001
TEST_ENTER_GRADE 1001 4 88.0    # Valid: Final grade for student 1001
TEST_ENTER_GRADE 1002 1 95.0    # Valid: Quiz grade for student 1002
TEST_ENTER_GRADE 1002 2 87.5    # Valid: Assignment grade for student 1002

# Error condition testing
TEST_ENTER_GRADE 9999 1 85.0    # Invalid: Student not found - should return STUDENT_NOT_FOUND
TEST_ENTER_GRADE 1003 0 75.0    # Invalid: Assessment type 0 - should return INVALID_INPUT
TEST_ENTER_GRADE 1003 5 75.0    # Invalid: Assessment type 5 - should return INVALID_INPUT
TEST_ENTER_GRADE 1003 1 -5.0    # Invalid: Grade below minimum - should return INVALID_INPUT
TEST_ENTER_GRADE 1003 1 105.0   # Invalid: Grade above maximum - should return INVALID_INPUT
TEST_ENTER_GRADE 1003 1 88.5    # Valid: Should succeed after error tests

# Partial Grade Scenarios - Testing students with incomplete grade sets
TEST_ENTER_GRADE 1004 1 90.0    # Partial: Only quiz grade
TEST_ENTER_GRADE 1004 3 85.0    # Partial: Add midterm (skip assignment)
TEST_ENTER_GRADE 1005 2 92.5    # Partial: Only assignment grade

# Average Calculations with Various Scenarios
# Format: TEST_CALCULATE_AVERAGE <student_id>
# Column 1: TEST_CALCULATE_AVERAGE (command)  
# Column 2: student_id (int) - student to calculate average for
TEST_CALCULATE_AVERAGE 1001     # Complete grades: (85.5+92.0+78.5+88.0)/4 = 86.0
TEST_CALCULATE_AVERAGE 1002     # Partial grades: (95.0+87.5)/2 = 91.25
TEST_CALCULATE_AVERAGE 1003     # Single grade: 88.5/1 = 88.5
TEST_CALCULATE_AVERAGE 1004     # Two grades: (90.0+85.0)/2 = 87.5
TEST_CALCULATE_AVERAGE 1005     # Single grade: 92.5/1 = 92.5
TEST_CALCULATE_AVERAGE 9999     # Non-existent student - should return STUDENT_NOT_FOUND

# Display Tests with Various Data States
# Format: TEST_DISPLAY_STUDENT <student_id>
# Column 1: TEST_DISPLAY_STUDENT (command)
# Column 2: student_id (int) - student to display
# Expected output format: "DISPLAY_STUDENT: <id> <quiz>,<assignment>,<midterm>,<final> <average> <letter>"
TEST_DISPLAY_STUDENT 1001       # Complete: 1001 85.5,92.0,78.5,88.0 86.0 B
TEST_DISPLAY_STUDENT 1002       # Partial: 1002 95.0,87.5,N/A,N/A 91.25 A
TEST_DISPLAY_STUDENT 1003       # Single: 1003 88.5,N/A,N/A,N/A 88.5 B
TEST_DISPLAY_STUDENT 1004       # Two grades: 1004 90.0,N/A,85.0,N/A 87.5 B
TEST_DISPLAY_STUDENT 1005       # Single: 1005 N/A,92.5,N/A,N/A 92.5 A
TEST_DISPLAY_STUDENT 9999       # Non-existent - should return STUDENT_NOT_FOUND

# Statistics with Mixed Data
# Format: TEST_CALCULATE_STATS
# Calculates statistics across all students with various grade completion levels
TEST_CALCULATE_STATS

# Additional Students for Distribution Testing
# Format: TEST_ADD_STUDENT <student_id>
TEST_ADD_STUDENT 1006    # Add more students to create larger dataset
TEST_ADD_STUDENT 1007

# Format: TEST_ENTER_GRADE <student_id> <assessment_type> <grade_value>
# Creating more diverse grade distribution for statistics
TEST_ENTER_GRADE 1006 1 75.0    # C-level grades
TEST_ENTER_GRADE 1006 2 80.0
TEST_ENTER_GRADE 1006 3 85.0
TEST_ENTER_GRADE 1006 4 78.0
TEST_ENTER_GRADE 1007 1 65.0    # D-level grades
TEST_ENTER_GRADE 1007 2 70.0

# Final Statistics Test
# Should now include diverse grade distribution across A, B, C, D ranges
TEST_CALCULATE_STATS